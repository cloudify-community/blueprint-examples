version: 2.1

orbs:
  node: cloudify/public-unittest-orb@volatile
  wagonorb: cloudify/wagon-bulder-orb@2.5.7
  releaseorb: cloudify/release-orb@volatile
  managerorb: cloudify/manager-orb@volatile

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi

executors:

  py36:
    docker:
      - image: circleci/python:3.6

  cloudify-machine-py3:
    machine:
      image: ubuntu-2004:202201-02

commands:

  validate_examples:
    steps:
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip --user
      - run: ecosystem-test prepare-test-manager -l $TEST_LICENSE --generate-new-aws-token -es aws_access_key_id=$aws_access_key_id -es aws_secret_access_key=$aws_secret_access_key -es aws_region_name=$aws_region_name -es ec2_region_endpoint=$ec2_region_endpoint -es azure_subscription_id=$azure_subscription_id -es azure_tenant_id=$azure_tenant_id -es azure_client_id=$azure_client_id -es azure_client_secret=$azure_client_secret -es azure_location=$azure_location -es openstack_username=$openstack_username -es openstack_password=$openstack_password -es openstack_tenant_name=$openstack_tenant_name -es openstack_auth_url=$openstack_auth_url -es openstack_region=$openstack_region -es openstack_region_name=$openstack_region_name -es openstack_external_network=$openstack_external_network -es openstack_project_id=$openstack_project_id -es openstack_project_name=$openstack_project_name -es openstack_project_domain_id=$openstack_project_domain_id -es openstack_user_domain_name=$openstack_user_domain_name -es openstack_project_domain_name=$openstack_project_domain_name -es base_image_id=$base_image_id -es base_flavor_id=$base_flavor_id -es gcp_credentials=$gcp_credentials -es openshift_secret_token=$openshift_secret_token -es openshift_master_endpoint=$openshift_master_endpoint -es vsphere_username=$vsphere_username -es vsphere_password=$vsphere_password -es vsphere_host=$vsphere_host -es vsphere_port=$vsphere_port -es vsphere_datacenter_name=$vsphere_datacenter_name -es vsphere_resource_pool_name=$vsphere_resource_pool_name -es vsphere_auto_placement=$vsphere_auto_placement -es vsphere_centos_template=$vsphere_centos_template -es vsphere_private_key=$vsphere_private_key -es vsphere_public_key=$vsphere_public_key -es vcloud_user=$vcloud_user -es vcloud_password=$vcloud_password -es vcloud_org=$vcloud_org -es vcloud_uri=$vcloud_uri -es vcloud_vdc=$vcloud_vdc -es vcloud_gateway=$vcloud_gateway  --yum-package python-netaddr --yum-package git --yum-package libselinux-python3
      - run: |
          ecosystem-test upload-plugin -PN utilities
          ecosystem-test upload-plugin -PN ansible
          ecosystem-test upload-plugin -PN kubernetes
          ecosystem-test upload-plugin -PN helm
          ecosystem-test upload-plugin -PN aws
          ecosystem-test upload-plugin -PN azure
          ecosystem-test upload-plugin -PN openstack
          ecosystem-test upload-plugin -PN vsphere
          ecosystem-test upload-plugin -PN gcp
          ecosystem-test upload-plugin -PN terraform
          ecosystem-test upload-plugin -PN docker
      - run: docker exec cfy_manager cfy plugins upload https://github.com/cloudify-cosmo/cloudify-vcloud-plugin/releases/download/2.0.1/cloudify_vcloud_plugin-2.0.1-py36-none-linux_x86_64.wgn -y https://github.com/cloudify-cosmo/cloudify-vcloud-plugin/releases/download/2.0.1/plugin.yaml
      - run: git clone https://github.com/cloudify-cosmo/cloudify-wagon-build-containers.git
      - run: docker build cloudify-wagon-build-containers/centos_7_py3 -t wagon
      - run: pushd scaling-kubernetes-clusters/plugin && docker run -v $PWD/:/packaging wagon && popd
      - run: docker cp scaling-kubernetes-clusters/plugin/*wgn cfy_manager:/tmp/plugin.wgn
      - run: docker cp scaling-kubernetes-clusters/plugin/plugin.yaml cfy_manager:/tmp/plugin.yaml
      - run: docker exec cfy_manager cfy plugins upload /tmp/plugin.wgn -y /tmp/plugin.yaml
      - run: docker cp db-lb-app/infrastructure/. cfy_manager:/tmp/infrastructure
      - run: docker exec cfy_manager cfy blueprints upload /tmp/infrastructure/aws.yaml -b infrastructure
      - run: docker exec cfy_manager cfy blueprints upload /tmp/infrastructure/openstack.yaml -b private-cloud-vm
      - run: docker exec cfy_manager cfy blueprints upload /tmp/infrastructure/azure.yaml -b public-cloud-vm
      - run: docker cp open-source-vnf/. cfy_manager:/tmp/open-source-vnf
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/connected-host/openstack.yaml -b connected-host-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/network-topology/openstack.yaml -b network-topology-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/httpd/openstack.yaml -b httpd-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/haproxy/openstack.yaml -b haproxy-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/pfsense/openstack.yaml -b pfsense-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/service/openstack.yaml -b service-openstack
      - run: |
          if `git log -1 --name-only --oneline | grep yaml | grep -v .circleci | grep -v ${CIRCLE_SHA1:0:7}`; then
              args=`git log -1 --name-only --oneline | grep yaml | grep -v .circleci | grep -v ${CIRCLE_SHA1:0:7} | xargs printf -- '-b %s '`
              ecosystem-test validate-blueprint $args
          else
            for d in `cat .cicd/supported_examples.json  | jq -r 'to_entries[] | .key'`
            do
                for f in `cat .cicd/supported_examples.json  | jq -r --arg keyvar "$d" '.[$keyvar][]'`
                do
                    ecosystem-test validate-blueprint -b $d/$f
                done
            done
          fi
      - run: |
          xblue () {
              for blueprint in `cfy blueprints list --json | jqids`;
                  do cfy blueprints delete $blueprint
                  done
          }
          xblue

  lint-examples:
    steps:
      - run: |
          pip install cfy-lint
          for d in `cat .cicd/supported_examples.json  | jq -r 'to_entries[] | .key'`
          do
            for f in `cat .cicd/supported_examples.json  | jq -r --arg keyvar "$d" '.[$keyvar][]'`
            do
            echo "Testing $d/$f"
            cfy-lint -b $d/$f
            done
          done

  validate_examples_nightlies:
    steps:
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip --user
      - run: ecosystem-test prepare-test-manager -l $TEST_LICENSE --generate-new-aws-token -es aws_access_key_id=$aws_access_key_id -es aws_secret_access_key=$aws_secret_access_key -es aws_region_name=$aws_region_name -es ec2_region_endpoint=$ec2_region_endpoint -es azure_subscription_id=$azure_subscription_id -es azure_tenant_id=$azure_tenant_id -es azure_client_id=$azure_client_id -es azure_client_secret=$azure_client_secret -es azure_location=$azure_location -es openstack_username=$openstack_username -es openstack_password=$openstack_password -es openstack_tenant_name=$openstack_tenant_name -es openstack_auth_url=$openstack_auth_url -es openstack_region=$openstack_region -es openstack_region_name=$openstack_region_name -es openstack_external_network=$openstack_external_network -es openstack_project_id=$openstack_project_id -es openstack_project_name=$openstack_project_name -es openstack_project_domain_id=$openstack_project_domain_id -es openstack_user_domain_name=$openstack_user_domain_name -es openstack_project_domain_name=$openstack_project_domain_name -es base_image_id=$base_image_id -es base_flavor_id=$base_flavor_id -es gcp_credentials=$gcp_credentials -es openshift_secret_token=$openshift_secret_token -es openshift_master_endpoint=$openshift_master_endpoint -es vsphere_username=$vsphere_username -es vsphere_password=$vsphere_password -es vsphere_host=$vsphere_host -es vsphere_port=$vsphere_port -es vsphere_datacenter_name=$vsphere_datacenter_name -es vsphere_resource_pool_name=$vsphere_resource_pool_name -es vsphere_auto_placement=$vsphere_auto_placement -es vsphere_centos_template=$vsphere_centos_template -es vsphere_private_key=$vsphere_private_key -es vsphere_public_key=$vsphere_public_key -es vcloud_user=$vcloud_user -es vcloud_password=$vcloud_password -es vcloud_org=$vcloud_org -es vcloud_uri=$vcloud_uri -es vcloud_vdc=$vcloud_vdc -es vcloud_gateway=$vcloud_gateway  --yum-package python-netaddr --yum-package git --yum-package libselinux-python3
      - run: docker exec cfy_manager cfy plugins upload https://github.com/cloudify-cosmo/cloudify-vcloud-plugin/releases/download/2.0.1/cloudify_vcloud_plugin-2.0.1-py36-none-linux_x86_64.wgn -y https://github.com/cloudify-cosmo/cloudify-vcloud-plugin/releases/download/2.0.1/plugin.yaml
      - run: git clone https://github.com/cloudify-cosmo/cloudify-wagon-build-containers.git
      - run: docker build cloudify-wagon-build-containers/centos_7_py3 -t wagon
      - run: pushd scaling-kubernetes-clusters/plugin && docker run -v $PWD/:/packaging wagon && popd
      - run: docker cp scaling-kubernetes-clusters/plugin/*wgn cfy_manager:/tmp/plugin.wgn
      - run: docker cp scaling-kubernetes-clusters/plugin/plugin.yaml cfy_manager:/tmp/plugin.yaml
      - run: docker exec cfy_manager cfy plugins upload /tmp/plugin.wgn -y /tmp/plugin.yaml
      - run: docker cp db-lb-app/infrastructure/. cfy_manager:/tmp/infrastructure
      - run: docker exec cfy_manager cfy blueprints upload /tmp/infrastructure/aws.yaml -b infrastructure
      - run: docker exec cfy_manager cfy blueprints upload /tmp/infrastructure/openstack.yaml -b private-cloud-vm
      - run: docker exec cfy_manager cfy blueprints upload /tmp/infrastructure/azure.yaml -b public-cloud-vm
      - run: docker cp open-source-vnf/. cfy_manager:/tmp/open-source-vnf
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/connected-host/openstack.yaml -b connected-host-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/network-topology/openstack.yaml -b network-topology-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/httpd/openstack.yaml -b httpd-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/haproxy/openstack.yaml -b haproxy-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/pfsense/openstack.yaml -b pfsense-openstack
      - run: docker exec cfy_manager cfy blueprints upload /tmp/open-source-vnf/service/openstack.yaml -b service-openstack
      - run: |
          for d in `cat .cicd/supported_examples.json  | jq -r 'to_entries[] | .key'`
          do
              for f in `cat .cicd/supported_examples.json  | jq -r --arg keyvar "$d" '.[$keyvar][]'`
              do
                  ecosystem-test validate-blueprint -b $d/$f
              done
          done
      - run: |
          xblue () {
              for blueprint in `cfy blueprints list --json | jqids`;
                  do cfy blueprints delete $blueprint
                  done
          }
          xblue

  test_examples:
    steps:
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip
      - run: ecosystem-test prepare-test-manager -l $TEST_LICENSE --generate-new-aws-token -es aws_access_key_id=$aws_access_key_id -es aws_secret_access_key=$aws_secret_access_key -es aws_region_name=$aws_region_name -es ec2_region_endpoint=$ec2_region_endpoint -es azure_subscription_id=$azure_subscription_id -es azure_tenant_id=$azure_tenant_id -es azure_client_id=$azure_client_id -es azure_client_secret=$azure_client_secret -es azure_location=$azure_location -es openstack_username=$openstack_username -es openstack_password=$openstack_password -es openstack_tenant_name=$openstack_tenant_name -es openstack_auth_url=$openstack_auth_url -es openstack_region=$openstack_region -es openstack_region_name=$openstack_region_name -es openstack_external_network=$openstack_external_network -es openstack_project_id=$openstack_project_id -es openstack_project_name=$openstack_project_name -es openstack_project_domain_id=$openstack_project_domain_id -es openstack_user_domain_name=$openstack_user_domain_name -es openstack_project_domain_name=$openstack_project_domain_name -es base_image_id=$base_image_id -es base_flavor_id=$base_flavor_id -es gcp_credentials=$gcp_credentials -es openshift_secret_token=$openshift_secret_token -es openshift_master_endpoint=$openshift_master_endpoint -es vsphere_username=$vsphere_username -es vsphere_password=$vsphere_password -es vsphere_host=$vsphere_host -es vsphere_port=$vsphere_port -es vsphere_datacenter_name=$vsphere_datacenter_name -es vsphere_resource_pool_name=$vsphere_resource_pool_name -es vsphere_auto_placement=$vsphere_auto_placement -es vsphere_centos_template=$vsphere_centos_template -es vsphere_private_key=$vsphere_private_key -es vsphere_public_key=$vsphere_public_key -es vcloud_user=$vcloud_user -es vcloud_password=$vcloud_password -es vcloud_org=$vcloud_org -es vcloud_uri=$vcloud_uri -es vcloud_vdc=$vcloud_vdc -es vcloud_gateway=$vcloud_gateway  --yum-package python-netaddr --yum-package git --yum-package libselinux-python3
      - run: docker cp virtual-machine/. cfy_manager:/tmp/virtual-machine
      - run: docker exec cfy_manager cfy blueprints upload /tmp/virtual-machine/$IAAS.yaml -b infra-$IAAS
      - run: ecosystem-test local-blueprint-test -b getting-started/mc-jboss.yaml -i infra_name=$IAAS -i infra_exists=true -i env_name=$CIRCLE_BUILD_NUM --test-id=bluex-gsmc-jboss-$IAAS-$CIRCLE_BUILD_NUM
      - run: ecosystem-test local-blueprint-test -b getting-started/mc-nodejs.yaml -i infra_name=$IAAS -i infra_exists=true -i env_name=$CIRCLE_BUILD_NUM --test-id=bluex-gsmc-nodejs-$IAAS-$CIRCLE_BUILD_NUM
      - run: ecosystem-test local-blueprint-test -b getting-started/mc-localstack.yaml -i infra_name=$IAAS -i infra_exists=true -i env_name=$CIRCLE_BUILD_NUM --test-id=bluex-gsmc-localstack-$IAAS-$CIRCLE_BUILD_NUM
      - run: |
          xblue () {
              for blueprint in `cfy blueprints list --json | jqids`;
                  do cfy blueprints delete $blueprint
                  done
          }
          xblue

  release_examples:
    steps:
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: workspace
      - run:
          name: update pip
          command: pip install -U pip===20.3.3
      - run:
          name: install cloudify
          command: pip install -U cloudify==5.1 pytest==4.6.3
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip --user
      - run: python .cicd/package_examples.py

jobs:

  blueprints-validation:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - lint-examples
      - validate_examples
      - lint-examples

  blueprints-validation-nightlies:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - validate_examples_nightlies

  getting-started-aws:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: aws
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - test_examples

  getting-started-aws-terraform:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: aws-terraform
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - test_examples

  getting-started-aws-cloudformation:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: aws-cloudformation
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - test_examples

  getting-started-azure:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: azure
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - test_examples

  getting-started-azure-arm:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: azure
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - test_examples

  getting-started-gcp:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: gcp
    steps:
      - checkout
      - managerorb/create_manager_container_latest
      - test_examples

  release:
    executor: py36
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - release_examples

workflows:
  version: 2
  tests:
    jobs:
      - getting-started-aws
      - getting-started-aws-terraform:
          requires:
            - getting-started-aws
          filters:
            branches:
              only: master
      - getting-started-aws-cloudformation:
          requires:
            - getting-started-aws-terraform
          filters:
            branches:
              only: master
      - getting-started-azure:
          requires:
            - getting-started-gcp
          filters:
            branches:
              only: master
      - getting-started-azure-arm:
          requires:
            - getting-started-azure
          filters:
            branches:
              only: master
      - getting-started-gcp:
          filters:
            branches:
              only: master
      - release:
          requires:
            - getting-started-gcp
          filters:
            branches:
              only: master

  Azure_GS:
    triggers:
    - schedule:
        cron: "0 0 * * 0"
        filters:
          branches:
            only:
              - master
    jobs:
      - getting-started-azure:
          filters:
            branches:
              only: master

  AzureARM_GS:
    triggers:
    - schedule:
        cron: "0 0 * * 1"
        filters:
          branches:
            only:
              - master
    jobs:
      - getting-started-azure-arm:
          filters:
            branches:
              only: master

  GCP_GS:
    triggers:
    - schedule:
        cron: "0 3 * * 1,4,6"
        filters:
          branches:
            only:
              - master
    jobs:
      - getting-started-gcp:
          filters:
            branches:
              only: master
