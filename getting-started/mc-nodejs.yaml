tosca_definitions_version: cloudify_dsl_1_3

description: >
  Deploys Nodejs.

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin

inputs:
  infra_name:
    description: >
      Name of infrastructure blueprint to deploy.
    type: string
    constraints:
      - valid_values:
          - openstack
          - openstack-v2
          - azure
          - azure-arm
          - aws
          - aws-terraform
          - aws-cloudformation
          - gcp
          - ansible
          - vsphere

  infra_archive:
    description: >
      URL of infra zip file.
    type: string
    # Don't update this line - it is being updated automatically
    # during merging. The getting-started.zip will have the updated URL.
    default: 'https://github.com/cloudify-community/blueprint-examples/releases/download/latest/virtual-machine.zip'

  infra_exists:
    type: string
    description: >
      Whether a getting started infrastructure blueprint has already been uploaded to the manager or not.
    default: false

  infra_deployment_id:
    type: string
    description: The blueprint name, the deployment name.
    default: { concat: [ 'infra-', { get_input: infra_name } ] }

  env_name:
    type: string
    description: Control parameters for names in resources.
    default: mcnodejsexample

node_templates:

  infrastructure:
    type: cloudify.nodes.Component
    properties:
      resource_config:
        blueprint:
          id: { get_input: infra_deployment_id }
          blueprint_archive: { get_input: infra_archive }
          main_file_name: { concat: [ { get_input: infra_name }, '.yaml' ] }
          external_resource: { get_input: infra_exists }
        deployment:
          id: { get_input: infra_deployment_id }
          inputs:
            env_name: { get_input: env_name }

  nodejs:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/nodejs/install.sh
            fabric_env: &fabric_env
              host_string: { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, endpoint ]}
              user: { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, user ]}
              key: { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, key_content ]}
              always_use_pty: false
    relationships:
      - type: cloudify.relationships.depends_on
        target: infrastructure

  http_server:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/http-server/install.sh
            fabric_env: *fabric_env
        stop:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/http-server/stop.sh
            fabric_env: *fabric_env
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs

  sample_app:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/app/install.sh
            fabric_env: *fabric_env
        delete:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/app/delete.sh
            fabric_env: *fabric_env
    relationships:
      - type: cloudify.relationships.contained_in
        target: http_server

outputs:
  admin_url:
    description: Administration console URL
    value: { concat: [ 'http://', { get_capability: [ { get_attribute: [ infrastructure, deployment, id ] }, endpoint ] }, ':8080' ] }
