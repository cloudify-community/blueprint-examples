tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-gcp-plugin
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin
  - includes/application.yaml
  - includes/kube-config.yaml

inputs:

  region:
    type: string
    description: The GCP region to deploy the application in, such as europe-west1.
    default: { get_secret: gcp_region }

  network_name:
    type: string
    description: The name of your GCP Virtual Network.
    default: kubevnet

  subnet_name:
    type: string
    description: The name of your GCP Virtual Network.
    default: kubevsubnet

  image:
    type: string
    description: A Centos 7 image.
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20170523

  instance_type:
    type: string
    description: A small GCP machine type.
    default: n1-standard-2

  agent_user:
    description: The username of the agent running on the instance created from the image.
    default: centos

dsl_definitions:

  client_config: &gcp_config
    auth: { get_secret: gcp_credentials }
    zone: { get_secret: gcp_zone }

node_types:

  k8s-cluster: &k8s-cluster
    derived_from: cloudify.gcp.nodes.Instance
    properties:
      gcp_config:
        default: *gcp_config
      agent_config:
        default:
          install_method: none
          key: { get_secret: agent_key_private }
          user: { get_input: agent_user }
      use_public_ip:
        default: true
      image_id:
        default: { get_input: image }
      instance_type:
        default: { get_input: instance_type }
      zone:
        default: { get_secret: gcp_zone }
      external_ip:
        default: true
      startup_script:
        default:
          type: string
          script: |
            yum install python-netaddr
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/gcp/key.py
          executor: central_deployment_agent
          inputs:
            user:
              default: { get_input: agent_user }
            ssh_keys:
              default:
                - { get_secret: agent_key_public }

  kube-master: *k8s-cluster

  kube-node: *k8s-cluster

node_templates:

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      name: { get_input: network_name }
      gcp_config: *gcp_config
      auto_subnets: false

  subnet:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      name: { get_input: subnet_name }
      region: { get_input: region }
      subnet: 10.11.12.0/22
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  firewall:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - 0-65535
        udp:
          - 0-65535
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  kube-master:
    type: kube-master
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet

  kube-node:
    type: kube-node
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet

groups:

  kube-master-group:
    members:
    - kube-master

  kube-node-group:
    members:
    - kube-node

policies:

  kube-master-policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [kube-master-group]

  kube-node-policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [kube-node-group]
