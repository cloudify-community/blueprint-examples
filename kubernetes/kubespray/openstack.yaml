tosca_definitions_version: cloudify_dsl_1_4

description: Install Kubernetes using Kubespray on Openstack.

imports:
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-openstack-plugin?version= >=3.2.2
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-ansible-plugin?version= >=2.10.0
  - plugin:cloudify-utilities-plugin?version= >=1.22.1
  - plugin:cloudify-kubernetes-plugin
  - includes/cloud-init.yaml
  - includes/application.yaml
  - includes/kube-config.yaml

inputs:

  auth_url:
    type: string
    default: { get_secret: openstack_auth_url }

  username:
    type: string
    default: { get_secret: openstack_username }

  password:
    type: string
    default: { get_secret: openstack_password }

  project_name:
    type: string
    default: { get_secret: openstack_project_name }

  region_name:
    description: >
      The Openstack region_name, for example RegionOne.
    type: string
    default: { get_secret: openstack_region }

  external_network_id:
    type: string
    description: The Openstack external network for floating IPs.

  public_subnet_cidr:
    type: string
    description: Classless Inter-Domain Routing IP Addressing Scheme for IP allocation.
    default: 10.10.1.0/24

  image_id:
    description: The ID of Centos 7 image that is available in your account.
    type: string
    default: { get_secret: base_image_id }

  flavor_id:
    description: The ID of an appropriate flavor that is available in your account, for example 3.
    type: string
    default: { get_secret: base_flavor_id }

  agent_user:
    type: string
    default: centos

  agent_key_name:
    type: string
    default: agent_key

  client_config_dict:
#    type: dict
    description: A dictionary containing the client configuration for Openstack. Default is for keystone v2. Provide an alternate input for keystone v3.
    default:
      username: { get_input: username }
      password: { get_input: password }
      project_name: { get_input: project_name }
      auth_url: { get_input: auth_url }
      region_name: { get_input: region_name }

dsl_definitions:

node_types:

  k8s-cluster: &k8s-cluster
    derived_from: cloudify.nodes.openstack.Server
    properties:
      client_config:
        default: { get_input: client_config_dict }
      agent_config:
        default:
          install_method: none
          key: { get_attribute: [agent_key, private_key_export] }
          user: { get_input: agent_user }
      use_public_ip:
        default: true

  kube-master: *k8s-cluster

  kube-node: *k8s-cluster

node_templates:

  external-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: { get_input: client_config_dict }
      use_external_resource: true
      resource_config:
        id: { get_input: external_network_id }
        kwargs:
          routing:
            external: true

  router:
    type: cloudify.nodes.openstack.Router
    properties:
      client_config: { get_input: client_config_dict }
    relationships:
      - type: cloudify.relationships.connected_to
        target: external-network

  network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: { get_input: client_config_dict }
      resource_config:
        name: network

  public-subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: { get_input: client_config_dict }
      resource_config:
        cidr: { get_input: public_subnet_cidr }
        enable_dhcp: true
        ip_version: 4
        dns_nameservers: [8.8.4.4, 8.8.8.8]
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.relationships.openstack.subnet_connected_to_router
        target: router

  security-group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      client_config: { get_input: client_config_dict }
      resource_config:
        name: kubernetes-security-group
        description: 'Kubernetes Openstack Group'
      security_group_rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - direction: ingress
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - direction: ingress
          protocol: icmp
          port_range_min: null
          port_range_max: null

  kube-node-port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: { get_input: client_config_dict }
      resource_config:
        network_id: { get_attribute: [ network, id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: public-subnet
      - type: cloudify.relationships.connected_to
        target: security-group

  kube-node-ip-address:
    type: cloudify.nodes.openstack.FloatingIP
    properties:
      client_config: { get_input: client_config_dict }
    relationships:
      - type: cloudify.relationships.connected_to
        target: external-network
      - type: cloudify.relationships.connected_to
        target: kube-node-port

  kube-node:
    type: kube-node
    properties:
      resource_config:
        name: kube-node
        image_id: { get_input: image_id }
        flavor_id: { get_input: flavor_id }
        user_data: { get_attribute: [ cloudify-host-cloud-config, cloud_config ] }
    relationships:
      - type: cloudify.relationships.openstack.server_connected_to_port
        target: kube-node-port
      - type: cloudify.relationships.depends_on
        target: cloudify-host-cloud-config
      # we need float ip for alive kube-node
      - type: cloudify.relationships.depends_on
        target: kube-node-ip-address
      # we need master to be alive when any kube node is alive
      - type: cloudify.relationships.depends_on
        target: kube-master
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            unlink:
              implementation: fabric.fabric_plugin.tasks.run_task
              inputs:
                tasks_file: scripts/clean_master.py
                task_name: remove_node
                fabric_env:
                  host_string: { get_attribute: [ kube-master-ip-address, floating_ip_address ] }
                  key: { get_attribute: [agent_key, private_key_export] }
                  user: { get_input: agent_user }

  kube-master-port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: { get_input: client_config_dict }
      resource_config:
        network_id: { get_attribute: [ network, id ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: public-subnet
      - type: cloudify.relationships.connected_to
        target: security-group

  kube-master-ip-address:
    type: cloudify.nodes.openstack.FloatingIP
    properties:
      client_config: { get_input: client_config_dict }
    relationships:
      - type: cloudify.relationships.connected_to
        target: external-network
      - type: cloudify.relationships.connected_to
        target: kube-master-port

  kube-master:
    type: kube-master
    properties:
      resource_config:
        name: kube-master
        image_id: { get_input: image_id }
        flavor_id: { get_input: flavor_id }
        user_data: { get_attribute: [ cloudify-host-cloud-config, cloud_config ] }
    relationships:
      - type: cloudify.relationships.openstack.server_connected_to_port
        target: kube-master-port
      - type: cloudify.relationships.depends_on
        target: cloudify-host-cloud-config
      # we need float ip for alive kube-master
      - type: cloudify.relationships.depends_on
        target: kube-master-ip-address
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
      type: cloudify.keys.nodes.RSAKey
      properties:
        resource_config:
          key_name: { get_input: agent_key_name }
          openssh_format: true
        use_secret_store: true
        use_secrets_if_exist: true
      interfaces:
        cloudify.interfaces.lifecycle:
          create:
            implementation: keys.cloudify_ssh_key.operations.create
            inputs:
              store_private_key_material: true

groups:

  kube-master-group:
    members:
    - kube-master
    - kube-master-port
    - kube-master-ip-address

  kube-node-group:
    members:
    - kube-node
    - kube-node-port
    - kube-node-ip-address

policies:

  kube-master-policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [kube-master-group]

  kube-node-policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [kube-node-group]
