tosca_definitions_version: cloudify_dsl_1_5

description: >
  This blueprint creates an AWS infrastructure environment using Ansible.
  This is an example of blueprint that supports scale workflow.
  libselinux-python/libselinux-python3 on the manager VM is prerequisite.

imports:
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-ansible-plugin?version= >=2.12.0
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  aws_region_name:
    type: string
    default: 'us-east-1'

  availability_zone:
    type: string
    description: The availability zone in the AWS Region.
    default: { concat: [ { get_input: aws_region_name }, 'b' ] }

  ami_owner_filter:
    type: string
    description: The AWS AMI owner number.
    default: '263721492972'

  ami_name_filter:
    type: string
    description: The name of the AWS AMI in the AWS region.
    default: 'CentOS7-cloudify-examples-image'

  instance_type:
    type: string
    default: t2.micro

  agent_user:
    type: string
    description: >
      The username of the agent running on the instance created from the image.
    default: 'ec2-user'

  agent_key_name:
    type: string
    default: agent_key

  env_name:
    type: string
    default: '0'

node_templates:

  # Use ansible Executor node type in order to execute resources/ansible/playbook.yaml
  # during install workflow.
  # See https://github.com/cloudify-cosmo/cloudify-ansible-plugin/blob/master/plugin.yaml
  # for more information about the properties provided.
  # Override stop lifecycle interface for executing resources/ansible/uninstall-playbook.yaml
  # playbook during uninstall workflow.
  # Execute ansible.cloudify_ansible.tasks.run task in order to do so.
  install_infra_playbook:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
         # create temporary file for saving infrastructure info by playbook.
        precreate:
          implementation: scripts/ansible/create_temp_file.py
          executor: central_deployment_agent
        start:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: resources/ansible/playbook.yaml
            start_at_task: "Check if vpc exists"
            sources: resources/ansible/inventory.yaml
            ansible_become: true
            number_of_attempts: 1
            run_data:
              availability_zone: { get_input: availability_zone }
              env_name: { get_input: env_name }
              infra_info_file: { get_attribute: [ SELF, ansible_infra_info_file ] }
            ansible_env_vars: &env_vars
              AWS_ACCESS_KEY_ID: { get_secret: aws_access_key_id }
              AWS_SECRET_ACCESS_KEY: { get_secret: aws_secret_access_key }
              AWS_SESSION_TOKEN: { get_secret: aws_session_token }
              AWS_REGION: { get_input: aws_region_name }
            extra_packages: &extra_packages
              - boto3==1.16.26
              - boto==2.49.0
              - selinux
        # Store infrastructure details in runtime properties.
        poststart:
          implementation: scripts/ansible/store_deployment_info.py
          executor: central_deployment_agent
          inputs:
            infra_info_file: { get_attribute: [ SELF, ansible_infra_info_file ] }
        stop:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: resources/ansible/uninstall-playbook.yaml
            start_at_task: "Delete route table"
            sources: resources/ansible/inventory.yaml
            number_of_attempts: 1
            run_data:
              internet_gateway_id: { get_attribute: [ SELF, internet_gateway_id ] }
              route_table_id: { get_attribute: [ SELF, route_table_id ] }
              security_group_id: { get_attribute: [ SELF, security_group_id ] }
              subnet_id: { get_attribute: [ SELF, subnet_id ] }
              vpc_id: { get_attribute: [ SELF, vpc_id ] }
              vpc_name: { get_attribute: [ SELF, vpc_name ] }
            ansible_env_vars: *env_vars
            extra_packages: *extra_packages
        postdelete:
          implementation: scripts/ansible/delete_temp_file.py
          executor: central_deployment_agent
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init

  install_eni_vm_playbook:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        precreate:
          implementation: scripts/ansible/create_temp_file.py
          executor: central_deployment_agent
        poststart:
          implementation: scripts/ansible/store_deployment_info.py
          executor: central_deployment_agent
          inputs:
            infra_info_file: { get_attribute: [ SELF, ansible_infra_info_file ] }
        start:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: resources/ansible/create_eni_and_vm_playbook.yaml
            start_at_task: "Create elastic network interface"
            sources: resources/ansible/inventory.yaml
            ansible_become: true
            number_of_attempts: 1
            run_data:
              security_group_id: { get_attribute: [ install_infra_playbook, security_group_id ] }
              subnet_id: { get_attribute: [ install_infra_playbook, subnet_id ] }
              instance_type: { get_input: instance_type }
              ami_owner_filter: { get_input: ami_owner_filter }
              ami_name_filter: { get_input: ami_name_filter }
              ec2_instance_user_data: { get_attribute: [ cloud_init, cloud_config ] }
              env_name: { get_input: env_name }
              infra_info_file: { get_attribute: [ SELF, ansible_infra_info_file ] }
            ansible_env_vars: *env_vars
            extra_packages: *extra_packages
        stop:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: resources/ansible/delete_eni_and_vm_playbook.yaml
            start_at_task: "Terminate vm"
            sources: resources/ansible/inventory.yaml
            number_of_attempts: 1
            run_data:
              ec2_instance_ids: { get_attribute: [ SELF, ec2_instance_ids ] }
              eni_id: { get_attribute: [ SELF, eni_id ] }
              public_ip: { get_attribute: [ SELF, public_ip ] }
            ansible_env_vars: *env_vars
            extra_packages: *extra_packages
        postdelete:
          implementation: scripts/ansible/delete_temp_file.py
          executor: central_deployment_agent
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: install_infra_playbook

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

groups:

  vm-group:
    members:
      - install_eni_vm_playbook

policies:

  vm-group-policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [vm-group]

capabilities:

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }
