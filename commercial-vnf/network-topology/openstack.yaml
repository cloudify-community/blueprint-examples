tosca_definitions_version: cloudify_dsl_1_3

description: >
  Create an Example Openstack Network.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:

  external_network_name:
    description: Openstack tenant external network name.
    default: GATEWAY_NET

  resource_prefix:
    description: >
      Prefix of every resource created at this deployment on OpenStack.
    default: cfy

  resource_suffix:
    description: >
      Suffix of every resource created at this deployment on OpenStack.
    default: 0

  nameservers:
    default: [8.8.4.4, 8.8.8.8]

  mgmt_subnet_cidr:
    default: 10.10.1.0/24

  mgmt_subnet_allocation_pools:
    default:
    - start: 10.10.1.2
      end: 10.10.1.254

  public_subnet_cidr:
    default: 10.10.2.0/24

  public_subnet_allocation_pools:
    default:
    - start: 10.10.2.2
      end: 10.10.2.254

  wan_subnet_cidr:
    default: 10.10.3.0/24

  wan_subnet_allocation_pools:
    default:
    - start: 10.10.3.2
      end: 10.10.3.254

  lan_subnet_cidr:
    default: 10.10.4.0/24

  lan_subnet_allocation_pools:
    default:
    - start: 10.10.4.2
      end: 10.10.4.254

  network_security_group_rules:
    default:
      - port_range_min: 1
        port_range_max: 65535
        protocol: tcp
      - port_range_min: 1
        port_range_max: 65535
        protocol: udp
      - port_range_min: null
        port_range_max: null
        protocol: icmp


dsl_definitions:

  client_config: &client_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: keystone_region }

node_templates:

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_router'
          - { get_input: resource_suffix }
    relationships:
      - type: cloudify.relationships.connected_to
        target: external_network

  mgmt_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_mgmt_net'
          - { get_input: resource_suffix }

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_public_net'
          - { get_input: resource_suffix }

  wan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_wan_net'
          - { get_input: resource_suffix }

  lan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_lan_net'
          - { get_input: resource_suffix }

  mgmt_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_mgmt_subnet'
          - { get_input: resource_suffix }
      subnet:
        ip_version: 4
        cidr: { get_input: mgmt_subnet_cidr }
        dns_nameservers: { get_input: nameservers }
        allocation_pools: { get_input: mgmt_subnet_allocation_pools }
    relationships:
    - type: cloudify.relationships.contained_in
      target: mgmt_network
    - type: cloudify.openstack.subnet_connected_to_router
      target: router

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_public_subnet'
          - { get_input: resource_suffix }
      subnet:
        ip_version: 4
        cidr: { get_input: public_subnet_cidr }
        dns_nameservers: { get_input: nameservers }
        allocation_pools: { get_input: public_subnet_allocation_pools }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.openstack.subnet_connected_to_router
      target: router

  wan_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_wan_net'
          - { get_input: resource_suffix }
      subnet:
        ip_version: 4
        cidr: { get_input: wan_subnet_cidr }
        dns_nameservers: { get_input: nameservers }
        allocation_pools: { get_input: wan_subnet_allocation_pools }
        gateway_ip: null
    relationships:
    - type: cloudify.relationships.contained_in
      target: wan_network

  lan_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_lan_net'
          - { get_input: resource_suffix }
      subnet:
        ip_version: 4
        cidr: { get_input: lan_subnet_cidr }
        dns_nameservers: { get_input: nameservers }
        allocation_pools: { get_input: lan_subnet_allocation_pools }
        gateway_ip: null
    relationships:
    - type: cloudify.relationships.contained_in
      target: lan_network

  network_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *client_config
      resource_id:
        concat:
          - { get_input: resource_prefix }
          - '_security_group'
          - { get_input: resource_suffix }
      rules: { get_input: network_security_group_rules }

capabilities:

  external_network:
    value: { get_attribute: [ external_network, external_name ] }

  router:
    value: { get_attribute: [ router, external_id ] }

  mgmt_network:
    value: { get_attribute: [ mgmt_network, external_id ] }

  public_network:
    value: { get_attribute: [ public_network, external_id ] }

  wan_network:
    value: { get_attribute: [ wan_network, external_id ] }

  lan_network:
    value: { get_attribute: [ lan_network, external_id ] }

  mgmt_subnet:
    value: { get_attribute: [ mgmt_subnet, external_id ] }

  public_subnet:
    value: { get_attribute: [ public_subnet, external_id ] }

  wan_subnet:
    value: { get_attribute: [ wan_subnet, external_id ] }

  lan_subnet:
    value: { get_attribute: [ lan_subnet, external_id ] }

  network_security_group:
    value: { get_attribute: [ network_security_group, external_id ] }
