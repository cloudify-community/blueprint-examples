tosca_definitions_version: cloudify_dsl_1_3

description: A simple GCP example network.

imports:
  - http://cloudify.co/spec/cloudify/4.5.5/types.yaml
  - plugin:cloudify-openstack-plugin?version=3.0.0

inputs:

  username:
    description: OS_USERNAME as specified in Openstack RC file.
    default: { get_secret: openstack_username }

  password:
    description: Openstack user password.
    default: { get_secret: openstack_password }

  project_name:
    description: OS_TENANT_NAME as specified in Openstack RC file.
    default: { get_secret: openstack_tenant_name }

  auth_url:
    description: OS_AUTH_URL as specified in Openstack RC file.
    default: { get_secret: openstack_auth_url }

  region:
    description: OS_REGION_NAME as specified in Openstack RC file.
    default: { get_secret: openstack_region }

  external_network_id:
    description: Openstack tenant external network name.

  nameservers:
    default: [8.8.4.4, 8.8.8.8]

  public_subnet_cidr:
    default: 10.10.0.0/24

  public_subnet_allocation_pools:
    default:
    - start: 10.10.0.2
      end: 10.10.0.254

  private_subnet_cidr:
    default: 10.10.1.0/24

  private_subnet_allocation_pools:
    default:
    - start: 10.10.1.2
      end: 10.10.1.254

dsl_definitions:

  client_config: &client_config
    username: { get_input: username }
    password: { get_input: password }
    project_name: { get_input: project_name }
    auth_url: { get_input: auth_url }
    region_name: { get_input: region }

node_templates:

  external-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_config:
        name: { get_input: external_network_id }
        kwargs:
          routing:
            external: true

  public-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *client_config
      resource_config:
        name: public-network

  private-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *client_config
      resource_config:
        name: private-network

  public-network-router:
    type: cloudify.nodes.openstack.Router
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: external-network

  public-subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *client_config
      resource_config:
        name: public-subnet
        ip_version: 4
        dns_nameservers: { get_input: nameservers }
        cidr: { get_input: public_subnet_cidr }
        allocation_pools: { get_input: public_subnet_allocation_pools }
    relationships:
      - type: cloudify.relationships.contained_in
        target: public-network
      - type: cloudify.relationships.openstack.subnet_connected_to_router
        target: public-network-router

  private-subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *client_config
      resource_config:
        ip_version: 4
        name: private-subnet
        dns_nameservers: { get_input: nameservers }
        cidr: { get_input: private_subnet_cidr }
        allocation_pools: { get_input: private_subnet_allocation_pools }
    relationships:
      - type: cloudify.relationships.contained_in
        target: private-network
      - type: cloudify.relationships.openstack.subnet_connected_to_router
        target: public-network-router

outputs:

  external_network:
    value: { get_attribute: [ external-network, id ] }

  public_network_router:
    value: { get_attribute: [ public-network-router, id ] }

  public_network:
    value: { get_attribute: [ public-network, id ] }

  private_network:
    value: { get_attribute: [ private-network, id ] }

  public_subnet:
    value: { get_attribute: [ public-subnet, id ] }

  private_subnet:
    value: { get_attribute: [ private-subnet, id ] }
