tosca_definitions_version: cloudify_dsl_1_5

description: >
  The relationship blueprint describes how to create dependencies between multiple node types resources
  In this case were adding a web application node (web calculator) that will be contained_in
  the http_web_server resource Note that the application is pulled from a git repository
  and can be easily modified to any other application as needed.
  See the app_scripts/create.sh to see how this is done.
  The webserver and application will run on the <manager host>:8000

imports:
  - cloudify/types/types.yaml

inputs:

  webserver_port:
    display_label: Webserver Port
    type: string
    description: The HTTP web server port
    default: 8000

  app_git:
    display_label: App Git
    type: string
    description: A url of a web based javascript application
    default: https://github.com/zxcodes/Calculator

node_templates:

  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: webserver/start.sh
          executor: central_deployment_agent
        stop:
          implementation: webserver/stop.sh
          executor: central_deployment_agent

  # The web_app is a nodeJS Calculator application.
  # We will fetch this application from a git repo by calling app_scripts/create.sh
  # as part of the create: lifecycle event.
  # The cloudify.relationships.contained_in will tell Cloudify to run
  # the lifecycle operation of this node type on the same host that was created by
  # the http_web_server node above This also means that this web_app node will
  # run only after the http_web_server has been deployed successfully
  web_app:
    type: cloudify.nodes.ApplicationModule
    relationships:
      - type: cloudify.relationships.contained_in
        target: http_web_server
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: app_scripts/create.sh
          executor: central_deployment_agent
          inputs:
            app_path: {get_attribute: [http_web_server, path] }
            app_git: { get_input: app_git }
        delete:
          implementation: app_scripts/delete.sh
          executor: central_deployment_agent
          inputs:
            app_path: {get_attribute: [http_web_server, path] }

capabilities:

  local_url:
    description: local endpoint of the application.
    value: { concat: [ 'http://localhost:', { get_input: webserver_port } ] }

  remote_url:
    description: The external endpoint of the application.
    value: { concat: [ 'Since this is an example, copy the manager ip/dns and append the following port ',
                       { get_input: webserver_port } ] }

  web_server_pid:
    description: The external endpoint of the application.
    value: { get_attribute: [ http_web_server, pid ] }
