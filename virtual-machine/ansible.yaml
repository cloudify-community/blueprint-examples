tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates an AWS infrastructure environment using Ansible.
  libselinux-python/libselinux-python3 on the manager VM is prerequisite.

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  aws_region_name:
      type: string
      default: 'us-east-1'

  availability_zone:
    type: string
    description: The availability zone in the AWS Region.
    default: { concat: [ { get_input: aws_region_name }, 'b' ] }

  ami_owner_filter:
    type: string
    description: The AWS AMI owner number.
    default: '263721492972'

  ami_name_filter:
    type: string
    description: The name of the AWS AMI in the AWS region.
    default: 'CentOS7-cloudify-examples-image'

  instance_type:
    type: string
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: 'ec2-user'

  agent_key_name:
    type: string
    default: agent_key

  resource_suffix:
    default: { get_input: env_name }

  env_name:
    type: string
    description: Control parameters for names in resources.
    default: 'example'

node_templates:

  # Use ansible Executor node type in order to execute resources/ansible/playbook.yaml during install workflow.
  # See https://github.com/cloudify-cosmo/cloudify-ansible-plugin/blob/master/plugin.yaml for more information about the properties provided.
  install-infra-playbook:
    type: cloudify.nodes.ansible.Executor
    properties:
      playbook_path: resources/ansible/playbook.yaml
      sources: resources/ansible/inventory.yaml
      ansible_become: true
      run_data:
        instance_type: { get_input: instance_type }
        ami_owner_filter: { get_input: ami_owner_filter  }
        ami_name_filter: { get_input: ami_name_filter }
        ec2_instance_user_data: { get_attribute: [ cloud_init, cloud_config ] }
        availability_zone: { get_input: availability_zone }
        resource_suffix: { get_input: resource_suffix }
      ansible_env_vars: &env_vars
        AWS_ACCESS_KEY_ID: { get_secret: aws_access_key_id }
        AWS_SECRET_ACCESS_KEY: {get_secret: aws_secret_access_key }
        AWS_REGION: { get_input: aws_region_name}
      extra_packages: &extra_packages
        - boto3==1.16.26
        - boto==2.49.0
        - selinux
        - ndg-httpsclient
        - pyopenssl
        - pyasn1
        - urllib3
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init

  # Override stop lifecycle interface for executing resources/ansible/uninstall-playbook.yaml playbook during uninstall workflow.
  # Execute ansible.cloudify_ansible.tasks.run task in order to do so.
  uninstall-infra-playbook:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        stop:
          implementation: ansible.cloudify_ansible.tasks.run
          inputs:
            playbook_path: resources/ansible/uninstall-playbook.yaml
            start_at_task: "Terminate vm"
            sources: resources/ansible/inventory.yaml
            run_data:
              ec2_instance_ids: { get_attribute: [aws_infra_info, ec2_instance_ids] }
              eni_id: { get_attribute: [aws_infra_info, eni_id] }
              internet_gateway_id: { get_attribute: [aws_infra_info, internet_gateway_id] }
              public_ip: { get_attribute: [aws_infra_info, public_ip] }
              route_table_id: { get_attribute: [aws_infra_info, route_table_id] }
              security_group_id: { get_attribute: [aws_infra_info, security_group_id] }
              subnet_id: { get_attribute: [aws_infra_info, subnet_id] }
              vpc_id: { get_attribute: [aws_infra_info, vpc_id] }
              vpc_name:  { get_attribute: [aws_infra_info, vpc_name] }
            ansible_env_vars: *env_vars
            extra_packages: *extra_packages
    relationships:
      - type: cloudify.relationships.depends_on
        target: aws_infra_info
  
  aws_infra_info:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/ansible/store_deployment_info.py
          executor: central_deployment_agent
    relationships:
      - type: cloudify.relationships.depends_on
        target: install-infra-playbook

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh-authorized-keys:
          - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

capabilities:

  endpoint:
    description: The external endpoint of the application.
    value:  { get_attribute: [aws_infra_info, public_ip] }

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }
