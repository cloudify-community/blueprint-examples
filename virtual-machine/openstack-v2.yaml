tosca_definitions_version: cloudify_dsl_1_3

description: >
  Create an Example Openstack Network.

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-openstack-plugin?version= 3.0.0
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  external_network_name:
    description: Openstack tenant external network name.
    default: { get_secret: openstack_external_network }

  image:
    description: Image ID
    default: { get_secret: base_image_id }

  flavor:
    description: Flavor ID
    default: { get_secret: base_flavor_id }

  env_name:
    type: string
    description: Control parameters for names in resources.
    default: '5'

  resource_suffix:
    default: { get_input: env_name }

  network_id:
    type: string
    description: A name for your new Openstack Network.
    default: { concat: [ cloudify-demo-network-v2-, { get_input: resource_suffix } ] }

  subnet_id:
    type: string
    description: A name for your new Openstack Subnet.
    default: { concat: [ cloudify-demo-subnet-v2-, { get_input: resource_suffix } ] }

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: centos

  agent_key_name:
    type: string
    default: agent_key

  cidr:
    type: string
    default: { get_input: resource_suffix }

  user_domain_name:
    description: Openstack user domain name.
    type: string
    default: { get_secret: openstack_user_domain_name }

  project_domain_name:
    description: The name of your OpenStack project.
    type: string
    default: { get_secret: openstack_project_domain_name }

  encode_cloud_init:
    type: boolean
    default: false

  use_existing_server:
    type: boolean
    default: false

  server_name:
    type: string
    default: { concat: [ cloudify-demo-server-v2-, { get_input: resource_suffix } ] }

dsl_definitions:

  client_config: &client_config
    username: { get_secret: openstack_username }
    password: { get_secret: openstack_password }
    auth_url: { get_secret: openstack_auth_url }
    region: { get_secret: openstack_region }
    project_name: { get_secret: openstack_project_name }
    user_domain_name: { get_input: user_domain_name }
    project_domain_name: { get_input: project_domain_name }

node_templates:

  vm:
    type: cloudify.nodes.openstack.Server
    properties:
      openstack_config: *client_config
      agent_config:
        install_method: none
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_attribute: [ public_network, external_name ] }
      server:
        key_name: ''
        userdata: { get_attribute: [ cloud_init, cloud_config ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.openstack.server_connected_to_port
        target: port

  port:
    type: cloudify.nodes.openstack.Port
    properties:
      openstack_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.openstack.port_connected_to_security_group
        target: security_group
      - type: cloudify.relationships.openstack.port_connected_to_floating_ip
        target: ip

  public_subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      openstack_config: *client_config
      resource_id: { get_input: subnet_id }
      subnet:
        ip_version: 4
        cidr: { concat: [ "10.10.", { get_input: cidr }, ".0/24" ] }
        dns_nameservers: [8.8.4.4, 8.8.8.8]
        allocation_pools:
          - start: { concat: [ "10.10.", { get_input: cidr }, ".2" ] }
            end: { concat: [ "10.10.", { get_input: cidr }, ".254" ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.openstack.subnet_connected_to_router
        target: public_network_router

  public_network:
    type: cloudify.nodes.openstack.Network
    properties:
      openstack_config: *client_config
      resource_id: { get_input: network_id }

  public_network_router:
    type: cloudify.nodes.openstack.Router
    properties:
      openstack_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: external_network

  security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      openstack_config: *client_config
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - port: 80
          remote_ip_prefix: 0.0.0.0/0
        - port: 8080
          remote_ip_prefix: 0.0.0.0/0
        - port: 9990
          remote_ip_prefix: 0.0.0.0/0
        - port: 2375
          remote_ip_prefix: 0.0.0.0/0
        - port: 4566
          remote_ip_prefix: 0.0.0.0/0
        - port: 4571
          remote_ip_prefix: 0.0.0.0/0
  ip:
    type: cloudify.nodes.openstack.FloatingIP
    properties:
      openstack_config: *client_config
      floatingip:
        floating_network_id: { get_attribute: [ external_network, external_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: external_network

  external_network:
    type: cloudify.nodes.openstack.Network
    properties:
      openstack_config: *client_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      encode_base64: { get_input: encode_cloud_init }
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

capabilities:

  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: [ ip, floating_ip_address ] }

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }
