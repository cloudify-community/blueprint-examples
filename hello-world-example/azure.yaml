tosca_definitions_version: cloudify_dsl_1_4

description: >
  This blueprint installs an application using Cloudify on Azure.

imports:
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-azure-plugin
  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin?version= >=1.22.1
  - includes/hello-world-ansible.yaml

inputs:

  env_name:
    type: string
    default: 'cfyhwazure'

  resource_prefix:
    type: string
    default: { get_input: env_name }

  resource_suffix:
    type: string
    default: '0'

  resource_group_name:
    type: string
    description: Your Azure Resource Group.
    default: { concat: [ { get_input: resource_prefix }, rg, { get_input: resource_suffix } ] }

  network_name:
    type: string
    description: Your Azure Virtual Network.
    default: { concat: [ { get_input: resource_prefix }, vn, { get_input: resource_suffix } ] }

  subnet_name:
    type: string
    description: Your Azure Virtual Network Subnet.
    default: { concat: [ { get_input: resource_prefix }, sub, { get_input: resource_suffix } ] }

  location:
    type: string
    description: Your Azure Region.
    default: eastus2

  image:
    type: dict
    default:
      publisher: Canonical
      offer: UbuntuServer
      sku: 14.04.5-LTS
      version: latest

  size:
    type: string
    default: Standard_A0

  retry_after:
    type: integer
    default: 60

  agent_user:
    type: string
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  agent_key_name:
    type: string
    default: agent_key

dsl_definitions:

  azure_config: &azure_config
    subscription_id: { get_secret: azure_subscription_id }
    tenant_id: { get_secret: azure_tenant_id }
    client_id: { get_secret: azure_client_id }
    client_secret: { get_secret: azure_client_secret }

node_templates:

  vm:
    type: cloudify.nodes.azure.compute.VirtualMachine
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      os_family: linux
      azure_config: *azure_config
      resource_config:
        hardwareProfile:
          vmSize: { get_input: size }
        storageProfile:
          imageReference: { get_input: image }
        osProfile:
          adminUsername: { get_input: agent_user }
          adminPassword: ''
          linuxConfiguration:
            ssh:
              publicKeys:
                - keydata: { get_attribute: [agent_key, public_key_export] }
                  path: { concat: [ '/home/', { get_input: agent_user }, '/.ssh/authorized_keys' ] }
            disablePasswordAuthentication: true
      agent_config:
        install_method: none
        key: { get_attribute: [agent_key, private_key_export] }
        user: { get_input: agent_user }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group
      - type: cloudify.relationships.azure.connected_to_storage_account
        target: storage_account
      - type: cloudify.relationships.azure.connected_to_availability_set
        target: availability_set
      - type: cloudify.relationships.azure.connected_to_nic
        target: nic
      - type: cloudify.relationships.depends_on
        target: agent_key

  nic:
    type: cloudify.nodes.azure.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group
      - type: cloudify.relationships.azure.nic_connected_to_network_security_group
        target: network_security_group
      - type: cloudify.relationships.azure.nic_connected_to_ip_configuration
        target: ip_config

  ip_config:
    type: cloudify.nodes.azure.network.IPConfiguration
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
      - type: cloudify.relationships.azure.ip_configuration_connected_to_subnet
        target: subnet
      - type: cloudify.relationships.azure.ip_configuration_connected_to_public_ip
        target: ip

  network_security_group:
    type: cloudify.nodes.azure.network.NetworkSecurityGroup
    properties:
      name: { concat: [ { get_input: resource_prefix }, nsg, { get_input: resource_suffix } ] }
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
          - name: ssh
            properties:
              description: SSH access
              protocol: Tcp
              sourcePortRange: '*'
              destinationPortRange: 22
              sourceAddressPrefix: '*'
              destinationAddressPrefix: '*'
              priority: 100
              access: Allow
              direction: Inbound
          - name: http
            properties:
              description: HTTP access
              protocol: Tcp
              sourcePortRange: '*'
              destinationPortRange: 80
              sourceAddressPrefix: '*'
              destinationAddressPrefix: '*'
              priority: 101
              access: Allow
              direction: Inbound
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group

  ip:
    type: cloudify.nodes.azure.network.PublicIPAddress
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group

  availability_set:
    type: cloudify.nodes.azure.compute.AvailabilitySet
    properties:
      name: { concat: [ { get_input: resource_prefix }, availset, { get_input: resource_suffix } ] }
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group

  storage_account:
    type: cloudify.nodes.azure.storage.StorageAccount
    properties:
      location: { get_input: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        accountType: Standard_LRS
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group

  subnet:
    type: cloudify.nodes.azure.network.Subnet
    properties:
      resource_group_name: { get_input: resource_group_name }
      name: { get_input: subnet_name }
      azure_config: *azure_config
      location: { get_input: location }
      resource_config:
        addressPrefix: 10.10.0.0/24
    relationships:
      - type: cloudify.relationships.azure.contained_in_virtual_network
        target: network

  network:
    type: cloudify.nodes.azure.network.VirtualNetwork
    properties:
      resource_group_name: { get_input: resource_group_name }
      name: { get_input: network_name }
      azure_config: *azure_config
      location: { get_input: location }
    relationships:
      - type: cloudify.relationships.azure.contained_in_resource_group
        target: resource_group

  resource_group:
    type: cloudify.nodes.azure.ResourceGroup
    properties:
      name: { get_input: resource_group_name }
      location: { get_input: location }
      azure_config: *azure_config

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

outputs:

  application_endpoint:
    description: The external endpoint of the application.
    value: { concat: [ 'http://', { get_attribute: [ vm, public_ip ] }, ':80' ] }
