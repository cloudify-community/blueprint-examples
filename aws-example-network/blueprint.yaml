tosca_definitions_version: cloudify_dsl_1_3

description: AWS VPC Scenario 2 Example Blueprint.

imports:
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    type: string
    description: YOUR AWS ACCESS KEY ID
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    description: YOUR AWS SECRET ACCESS KEY
    default: { get_secret: aws_secret_access_key }

  region_name:
    type: string
    description: YOUR AWS REGION NAME
    default: 'us-east-1'

  ec2_region_endpoint:
    type: string
    default: { concat: [ 'ec2.', { get_input: region_name}, '.amazonaws.com' ] }

  availability_zone:
    type: string
    default: { concat: [ { get_input: region_name }, 'b' ] }

  vpc_cidr:
    type: string
    default: 10.11.0.0/16

  public_subnet_cidr:
    type: string
    default: 10.11.0.0/24

  private_subnet_cidr:
    type: string
    default: 10.11.1.0/24

dsl_definitions:

  aws_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    aws_session_token: { get_secret: aws_session_token }
    region_name: { get_input: region_name }

node_templates:

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        CidrBlock: { get_input: vpc_cidr }
      client_config: *client_config

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: { get_input: public_subnet_cidr }
        AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: internet_gateway

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: { get_input: private_subnet_cidr }
        AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: internet_gateway

  public_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: public_subnet

  private_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: private_subnet

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_subnet_routetable
      - type: cloudify.relationships.connected_to
        target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        Domain: 'vpc'
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: nat_gateway_ip

  route_private_subnet_nat_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_subnet_routetable
      - type: cloudify.relationships.connected_to
        target: nat_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

capabilities:

  vpc_id:
    description: 'vpc id'
    value: { get_attribute: [ vpc, aws_resource_id ] }

  public_subnet_id:
    description: 'public subnet id'
    value: { get_attribute: [ public_subnet, aws_resource_id ] }

  private_subnet_id:
    description: 'private subnet id'
    value: { get_attribute: [ private_subnet, aws_resource_id ] }

  region_name:
    description: 'aws region name'
    value: { get_input: region_name }

  ec2_region_endpoint:
    description: 'ec2 region endpoint'
    value: { get_input: ec2_region_endpoint }

  availability_zone:
    description: 'availability zone'
    value: { get_input: availability_zone }
