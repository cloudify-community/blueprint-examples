tosca_definitions_version: cloudify_dsl_1_5

description: This blueprint creates a VM and network in GCP. It then installs docker on it. Then it builds a docker image on that vm. Finally, it creates a docker container from that image.

imports:
  - cloudify/types/types.yaml
  - plugin:cloudify-docker-plugin
  - plugin:cloudify-gcp-plugin?version= >=1.6.0
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

inputs:

  region:
    display_label: Region
    type: string
    description: The GCP region to deploy the application in, such as europe-west1.
    default: 'europe-west1'

  zone:
    display_label: Zone
    type: string
    description: The GCP zone to deploy the application in, such as europe-west1-b.
    default: 'europe-west1-b'

  image:
    display_label: Image
    type: string
    description: Centos image.
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20191210

  agent_user:
    display_label: Agent User
    type: string
    description: >
      The username of the agent running on the instance created from the image.
    default: 'centos'

  agent_key_name:
    display_label: Agent Key Name
    type: string
    default: agent_key

  docker_user:
    display_label: Docker User
    type: string
    description: Control parameters for names in resources.
    default: 'centos'

  centos_version:
    display_label: Centos Version
    type: string
    default: "7"

  container_volume:
    display_label: Container Volume
    type: string
    default: "/mnt/vol1"

  image_tag:
    display_label: Image Tag
    type: string
    default: "centos:"

dsl_definitions:

  docker_config: &docker_config
    docker_host: { get_attribute: [vm, ip] }
    docker_rest_port: 2375

  docker_machine_config: &docker_machine_config
    docker_ip: { get_attribute: [vm, ip] }
    docker_user: { get_input: docker_user }
    docker_key: { get_attribute: [agent_key, private_key_export] }

  client_config: &gcp_config
    auth: { get_secret: gcp_credentials }
    zone: { get_input: zone }

node_templates:

  docker_centos_image:
    type: cloudify.nodes.docker.image
    properties:
      client_config: *docker_config
      resource_config:
        image_content:
          concat:
            - |
              FROM amd64/centos:7
              MAINTAINER Cosmo (hello@cloudify.co)
              RUN yum install -y openssh-server openssh-clients
        tag:
          concat:
            - { get_input: image_tag }
            - { get_input: centos_version }
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_installation

  docker_centos_container_files:
    type: cloudify.nodes.docker.container_files
    properties:
      resource_config:
        docker_machine: *docker_machine_config
        source: https://github.com/cloudify-community/blueprint-examples/releases/download/5.0.5-28/hello-world-example.zip
        destination: ""
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_installation

  docker_centos_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config: *docker_config
      resource_config:
        image_tag:
          concat:
            - { get_input: image_tag }
            - { get_input: centos_version }
        container_args:
          command: ls
          working_dir: { get_input: container_volume }
          volumes:
            - { get_input: container_volume }
          volumes_mapping:
            - { get_attribute: [docker_centos_container_files, destination] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_centos_image
      - type: cloudify.relationships.depends_on
        target: docker_centos_container_files

  docker_installation:
    type: cloudify.nodes.docker.host
    properties:
      docker_machine: *docker_machine_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vm

  vm:
    type: cloudify.nodes.gcp.Instance
    properties:
      client_config: *gcp_config
      agent_config:
        install_method: none
        key: { get_attribute: [agent_key, private_key_export] }
        user: { get_input: agent_user }
      use_public_ip: true
      zone: { get_input: zone }
      external_ip: true
    relationships:
      - type: cloudify.relationships.connected_to
        target: firewall
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.relationships.depends_on
        target: agent_key
      - type: cloudify.relationships.depends_on
        target: disk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/gcp/key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
              - { get_attribute: [agent_key, public_key_export] }

  disk:
    type: cloudify.nodes.gcp.Volume
    properties:
      client_config: *gcp_config
      image: { get_input: image }
      size: 20
      boot: true

  firewall:
    type: cloudify.nodes.gcp.FirewallRule
    properties:
      client_config: *gcp_config
      allowed:
        tcp:
          - 22
          - 80
          - 443
          - 9990
          - 8080
          - 2375
          - 53333
          - 4566
          - 4571
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  subnet:
    type: cloudify.nodes.gcp.SubNetwork
    properties:
      region: { get_input: region }
      subnet: 10.11.12.0/22
      client_config: *gcp_config
    relationships:
      - type: cloudify.relationships.gcp.contained_in_network
        target: network

  network:
    type: cloudify.nodes.gcp.Network
    properties:
      client_config: *gcp_config
      auto_subnets: false

  agent_key:
    type: cloudify.nodes.keys.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

groups:

  vm-group:
    members:
      - vm
      - disk

policies:

  vm-group-policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [vm-group]

capabilities:

  endpoint:
    description: The external endpoint of the application.
    value: { get_attribute: [ vm, ip ] }

  user:
    description: user ID.
    value: { get_input: agent_user }

  key_content:
    description: Private agent key
    value: { get_attribute: [agent_key, private_key_export] }
